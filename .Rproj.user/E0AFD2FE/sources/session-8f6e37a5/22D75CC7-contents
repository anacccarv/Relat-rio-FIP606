---
title: "introducao"
message: false
warning: false
---

# Introdução

R é uma linguagem de programação e ambiente de software livre amplamente utilizado para análise estatística, visualização de dados e ciência de dados. Criado por Ross Ihaka e Robert Gentleman na década de 1990, R teve sua primeira versão estável lançada em 2000 e, desde então, tem crescido em popularidade devido a suas poderosas capacidades e à forte comunidade de usuários e desenvolvedores.

Embora seja perfeitamente possível usar apenas a instalação básica do R, muitas pessoas preferem utilizar um ambiente de desenvolvimento integrado (IDE) para uma experiência mais eficiente e amigável. Um dos IDEs mais populares para R é o RStudio.

RStudio é um complemento do R que oferece uma interface mais intuitiva e funcionalidades avançadas para facilitar seu trabalho com R.

Para fazer o download dos programas [clique aqui](https://posit.co/download/rstudio-desktop/#download).

# Começando um projeto no RStudio

Manter seus projetos organizados é crucial para facilitar o entendimento dos códigos no momento das análises e principalmente no futuro.

## Passos para Começar um Projeto Organizado

1.  **Criar um Projeto no RStudio**

    -   Inicie o RStudio e vá para `File > New Project`.

    -   Siga as instruções para criar um novo projeto. Isso ajudará a manter todos os arquivos relacionados ao seu projeto em um único diretório.

2.  **Criar Arquivos Quarto Markdown**

    -   Use Quarto Markdown para combinar conteúdo e código executável em um documento finalizado.

    -   No RStudio, vá para `File > New File > Quarto Document` para criar um novo arquivo .qmd.

Utilizar o Quarto Markdown permite a criação de documentos dinâmicos que integram texto e código, facilitando a análise reprodutível e a comunicação dos resultados.

# Pacotes R

"Você pode pensar em um pacote como uma coleção de funções, dados e arquivos de ajuda agrupados em uma estrutura padrão bem definida que você pode baixar e instalar em R" (Intro to R, n.d.).

Referência: Intro to R. (n.d.). Packages. Retrieved from <https://intro2r.com/packages.html>

Esses pacotes podem ser obtidos de diversas fontes, sendo as mais populares o CRAN, o Bioconductor e o GitHub.

## Para instalar pacotes do CRAN:

Para instalar um pacote do CRAN você pode usar a função `install.packages()`.

```{r}
#Exemplo:
#install.packages("nome do pacote de interesse")
```

É uma boa prática atualizar periodicamente os pacotes instalados para acessar novas funcionalidades e correções de bugs. Para atualizar pacotes do CRAN, você pode usar a função `update.packages()`.

## Para instalar pacotes do GitHub:

Há várias maneiras de instalar pacotes hospedados no GitHub, mas uma das mais eficientes é utilizar a função `install_github()` do pacote remotes. Antes de usar esta função, é necessário saber o nome de usuário do GitHub do proprietário do repositório e o nome do próprio repositório.

```{r}
#Exemplo:
remotes::install_github("emdelponte/r4pde")
```

## Carregamento de pacotes:

Depois de instalar um pacote em seu computador, ele não está imediatamente disponível para uso. Para utilizar um pacote, você precisa carregá-lo utilizando a função `library()`.

```{r}
#Exemplo:
library(tidyverse)
```

A função `library()` também carregará quaisquer pacotes adicionais necessários e poderá imprimir informações adicionais do pacote.

*Dica*: colocar todos pacotes necessários para a análise no topo dos scripts em um chunk específico para torná-los mais acessíveis e fáceis de encontrar.

As vezes, pode ser útil usar uma função sem primeiro usar a função `library()`. Por exemplo, se for utilizar apenas uma ou duas funções em seu script e não quiser carregar o pacote completo, poderá acessar a função diretamente, basta especificar o nome do pacote seguido de :: e o nome da função.

```{r}
#Exemplo:
#tidyverse::select()
```
